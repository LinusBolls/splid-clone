// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  inviteCode  String @unique
  currency    String

  expenses          Expense[]
  expenseCategories ExpenseCategory[]
  groupMembers      GroupMember[]
}

model GroupMember {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  group    Group                @relation(fields: [groupId], references: [id])
  expenses GroupMemberExpense[]
  groupId  String
}

model Expense {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  location    String

  assets                 ExpenseAsset[]
  subExpense             SubExpense[]
  group                  Group                    @relation(fields: [groupId], references: [id])
  groupId                String
  ExpenseExpenseCategory MappingExpenseCategory[]
}

model ExpenseAsset {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // TODO Linus, upload id or something
  uploadId String

  expense   Expense @relation(fields: [expenseId], references: [id])
  expenseId String
}

model ExpenseCategory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                   String
  group                  Group                    @relation(fields: [groupId], references: [id])
  groupId                String
  ExpenseExpenseCategory MappingExpenseCategory[]
}

model MappingExpenseCategory {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expense           Expense         @relation(fields: [expenseId], references: [id])
  expenseId         String
  expenseCategory   ExpenseCategory @relation(fields: [expenseCategoryId], references: [id])
  expenseCategoryId String

  @@id([expenseId, expenseCategoryId])
}

model SubExpense {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  priceReferenceCurrency Decimal
  price                  Decimal
  currency               String

  expense     Expense              @relation(fields: [expenseId], references: [id])
  groupMember GroupMemberExpense[]
  expenseId   String
}

model GroupMemberExpense {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount Decimal
  role   GROUP_MEMBER_EXPENSE_ROLE

  subExpense    SubExpense  @relation(fields: [subExpenseId], references: [id])
  groupMember   GroupMember @relation(fields: [groupMemberId], references: [id])
  subExpenseId  String
  groupMemberId String
}

enum GROUP_MEMBER_EXPENSE_ROLE {
  SPONSOR
  GAINER
}

model Currency {
  createdAt DateTime @default(now())

  symbol       String
  name         String
  date           DateTime @db.Date
  CurrencyRate CurrencyRate[]

  @@id([symbol, date])
}

model CurrencyRate {
  createdAt DateTime @default(now())

  currency       Currency @relation(fields: [symbol, date], references: [symbol, date])
  symbol String
  date           DateTime @db.Date
  rateEurBase   Decimal

  @@id([symbol, date])
}